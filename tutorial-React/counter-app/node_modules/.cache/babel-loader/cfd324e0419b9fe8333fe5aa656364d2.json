{"ast":null,"code":"var _jsxFileName = \"D:\\\\UPB\\\\practica-ind-prof\\\\tutorial-React\\\\counter-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 0,\n      imageURL: 'https:picsum.photos/200',\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n    this.styles = {\n      fontSize: 15,\n      fontWeight: \"bold\"\n    };\n    this.product = 0;\n\n    this.handleIncrement = product => {\n      console.log('Increment Increased');\n      console.log(product);\n      this.setState({\n        count: this.state.count + 1\n      }); //problema, this es undefined\n      //solucion 1 crear un constructor y reemplazar el valor de la funcion con la funcion.bind\n      //solucion 2 usar arrow function\n    };\n  }\n\n  // Para pasarse argumentos de eventos se puede crear otra funcion o poner la arrow funcion dentro de la funcion que la llama\n  // doHandleIncrement = () => {\n  //     this.handleIncrement({id:1})\n  // }\n  render() {\n    console.log(\"props\", this.props);\n    let classes = this.getBadgeClasses();\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello World!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: this.styles,\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleIncrement(this.product),\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: tag\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 46\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this); //solo puede interpretar un tag por eso se los envuelve en div o si quieres que no haya div con react.fragment\n  } // badge y btn son de bootrap \n  // se puede hacer styles normales como styles y hacer css a lo normal\n  //intentar mantener limpio el metodo de render\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state; // return count === 0 ? <h1>Zero</h1> : count;\n\n    return count === 0 ? \"Zero\" : count; //if count equals 0 then return \"Zero\" : otherwise count\n    // === ----> if equals\n    //? ------> return\n    //: ----> otherwise\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"names":["React","Component","Counter","state","count","imageURL","tags","styles","fontSize","fontWeight","product","handleIncrement","console","log","setState","render","props","classes","getBadgeClasses","formatCount","map","tag"],"sources":["D:/UPB/practica-ind-prof/tutorial-React/counter-app/src/components/counter.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nclass Counter extends Component {\r\n    state = {\r\n        count:0,\r\n        imageURL: 'https:picsum.photos/200',\r\n        tags: ['tag1', 'tag2', 'tag3']\r\n    };\r\n\r\n    styles = {\r\n        fontSize: 15,\r\n        fontWeight: \"bold\"\r\n    }\r\n\r\n    product = 0\r\n    // constructor(){\r\n    //     super();\r\n    //     this.handleIncrement = this.handleIncrement.bind(this)\r\n    // }\r\n    \r\n    handleIncrement = product => {\r\n        console.log('Increment Increased');\r\n        console.log(product);\r\n        this.setState({count: this.state.count + 1});\r\n        //problema, this es undefined\r\n        //solucion 1 crear un constructor y reemplazar el valor de la funcion con la funcion.bind\r\n        //solucion 2 usar arrow function\r\n    };\r\n\r\n    // Para pasarse argumentos de eventos se puede crear otra funcion o poner la arrow funcion dentro de la funcion que la llama\r\n    // doHandleIncrement = () => {\r\n    //     this.handleIncrement({id:1})\r\n    // }\r\n\r\n    render() { \r\n        console.log(\"props\", this.props);\r\n        \r\n        let classes = this.getBadgeClasses();\r\n        return (\r\n        <React.Fragment>\r\n            <h1>Hello World!</h1>\r\n            {/* <img src={this.state.imageURL} alt=\"\" /> */}\r\n            <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button \r\n            onClick={() => this.handleIncrement(this.product)} \r\n            className='btn btn-secondary btn-sm'>Increment</button>\r\n            <ul>\r\n                {this.state.tags.map (tag => <li key={tag}>{tag}</li>) }\r\n            </ul>\r\n        </React.Fragment>);\r\n        //solo puede interpretar un tag por eso se los envuelve en div o si quieres que no haya div con react.fragment\r\n    }\r\n    // badge y btn son de bootrap \r\n    // se puede hacer styles normales como styles y hacer css a lo normal\r\n    //intentar mantener limpio el metodo de render\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 bg-\";\r\n        classes += (this.state.count === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){\r\n        const {count} = this.state;\r\n        // return count === 0 ? <h1>Zero</h1> : count;\r\n\r\n        return count === 0 ? \"Zero\" : count;\r\n        //if count equals 0 then return \"Zero\" : otherwise count\r\n        // === ----> if equals\r\n        //? ------> return\r\n        //: ----> otherwise\r\n    }\r\n}\r\n \r\nexport default Counter;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;EAAA;IAAA;IAAA,KAC5BE,KAD4B,GACpB;MACJC,KAAK,EAAC,CADF;MAEJC,QAAQ,EAAE,yBAFN;MAGJC,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;IAHF,CADoB;IAAA,KAO5BC,MAP4B,GAOnB;MACLC,QAAQ,EAAE,EADL;MAELC,UAAU,EAAE;IAFP,CAPmB;IAAA,KAY5BC,OAZ4B,GAYlB,CAZkB;;IAAA,KAkB5BC,eAlB4B,GAkBVD,OAAO,IAAI;MACzBE,OAAO,CAACC,GAAR,CAAY,qBAAZ;MACAD,OAAO,CAACC,GAAR,CAAYH,OAAZ;MACA,KAAKI,QAAL,CAAc;QAACV,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;MAA3B,CAAd,EAHyB,CAIzB;MACA;MACA;IACH,CAzB2B;EAAA;;EA2B5B;EACA;EACA;EACA;EAEAW,MAAM,GAAG;IACLH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKG,KAA1B;IAEA,IAAIC,OAAO,GAAG,KAAKC,eAAL,EAAd;IACA,oBACA,QAAC,KAAD,CAAO,QAAP;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAGI;QAAM,KAAK,EAAE,KAAKX,MAAlB;QAA0B,SAAS,EAAE,KAAKW,eAAL,EAArC;QAAA,UAA8D,KAAKC,WAAL;MAA9D;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII;QACA,OAAO,EAAE,MAAM,KAAKR,eAAL,CAAqB,KAAKD,OAA1B,CADf;QAEA,SAAS,EAAC,0BAFV;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ,eAOI;QAAA,UACK,KAAKP,KAAL,CAAWG,IAAX,CAAgBc,GAAhB,CAAqBC,GAAG,iBAAI;UAAA,UAAeA;QAAf,GAASA,GAAT;UAAA;UAAA;UAAA;QAAA,QAA5B;MADL;QAAA;QAAA;QAAA;MAAA,QAPJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,CAJK,CAgBL;EACH,CAjD2B,CAkD5B;EACA;EACA;;;EAEAH,eAAe,GAAG;IACd,IAAID,OAAO,GAAG,eAAd;IACAA,OAAO,IAAK,KAAKd,KAAL,CAAWC,KAAX,KAAqB,CAAtB,GAA2B,SAA3B,GAAuC,SAAlD;IACA,OAAOa,OAAP;EACH;;EAEDE,WAAW,GAAE;IACT,MAAM;MAACf;IAAD,IAAU,KAAKD,KAArB,CADS,CAET;;IAEA,OAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAJS,CAKT;IACA;IACA;IACA;EACH;;AArE2B;;AAwEhC,eAAeF,OAAf"},"metadata":{},"sourceType":"module"}